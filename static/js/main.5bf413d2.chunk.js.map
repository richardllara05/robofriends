{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","email","id","name","className","src","alt","CardList","robots","map","robot","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","querySelector","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4PAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCNSC,G,YATF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAIC,EAAd,EAAcA,KAAd,OACL,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,YAAwCI,IAAI,WACpD,6BACI,4BAAKH,GACL,2BAAIF,OCALM,EALE,SAAC,GACd,OAD2B,EAAZC,OACDC,KAAI,SAACC,EAAOC,GAAR,OAChB,kBAAC,EAAD,CAAMC,IAAKF,EAAMR,GAAID,MAAOS,EAAMT,MAAOC,GAAIQ,EAAMR,GAAIC,KAAMO,EAAMP,WCE1DU,EALG,SAAC,GAAD,IAAEC,EAAF,EAAEA,aAAF,OACd,yBAAKV,UAAU,OACX,2BAAOA,UAAU,mCAAmCW,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,EAAcX,KAAK,GAAGD,GAAG,OCG1HgB,EALA,SAAAC,GAAK,OAChB,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,UAC/DJ,EAAMK,WCmBAC,E,kDApBX,WAAYN,GAAO,IAAD,8BACd,gBACKO,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,uDAEAG,KAAKX,MAAMK,a,GAhBHQ,aC8DZC,E,kDA/CX,aAAc,IAAD,8BACT,gBAeJC,eAAiB,SAAAC,GACb,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAfzC,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAJR,E,gEAQO,IAAD,OAEfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEvB,OAAOmC,S,+BAUjC,IAAD,OACEC,EAAiBd,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAArC,GAAM,OAAIA,EAAOL,KAAK2C,cAAcC,SAAS,EAAKrB,MAAMU,YAAYU,kBACpH,OAAqC,IAA7BhB,KAAKJ,MAAMlB,OAAOwC,OAAiB,uCAEvC,kBAAC,WAAD,KACI,wBAAI5C,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,W,GAhCxBZ,a,MCJlBiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,yBAAK/C,UAAU,MACb,kBAAC,EAAD,QAGJgD,SAASC,cAAc,UPiHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,c","file":"static/js/main.5bf413d2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Card.css'\r\n\r\nconst Card = ( {email, id, name} ) =>\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from  './Card';\r\n\r\nconst CardList = ({robots}) => { \r\n    return robots.map((robot, i) =>\r\n      <Card key={robot.id} email={robot.email} id={robot.id} name={robot.name} />\r\n    )\r\n}\r\nexport default CardList","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) =>\r\n    <div className=\"pa2\">\r\n        <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange} name=\"\" id=\"\"/>\r\n    </div>\r\n\r\nexport default SearchBox;","import React from \"react\";\r\n\r\nconst Scroll = props => \r\n    <div style={{overflowY: 'scroll', border:'5px solid black', height: '800px'}}>\r\n        {props.children}\r\n    </div>\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops. This is not good</h1>\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component, Fragment} from \"react\";\r\nimport \"./App.css\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\"\r\n\r\n// Component LifeCycle Hooks\r\n// Mounting: Start of the app [Rendering from start]\r\n// Updating: Whenever the component is updated [Functions recieve new input]\r\n// Unmounting: When a component is removed\r\n\r\n// Props: Come from states [Parent tells the child the state and the child cannot change the state]\r\n// Object that describes your application are called a state [Which is able to change realtime]\r\n// State requires use of default class version of Components [Which lives in parent component]\r\n// Smart components have class syntax and state variable\r\nclass App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        // API Request\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots:users}))\r\n        \r\n    }\r\n\r\n    onSearchChange = event => {\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n    \r\n\r\n    // Every time the state changes, render is reran\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots => robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()));\r\n        return (this.state.robots.length === 0 ) ? <h1>Loading</h1> :\r\n         (\r\n            <Fragment>\r\n                <h1 className=\"f2\">Robofriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// Using function notation\r\n// const App = () =>\r\n//     <Fragment>\r\n//         <h1>Robofriends</h1>\r\n//         <SearchBox />\r\n//         <CardList robots={robots}/>\r\n//     </Fragment>\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\n\n// React has\n// 1. Component\n// 2. State\n// 3. Children\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"tc\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.querySelector('#root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}